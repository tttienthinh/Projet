class Graph:
    def __init__(self, nodes=[]):
        self.nodes = nodes
        self.graph = dict([(n, []) for n in nodes])
        self.nb_nodes = len(nodes)
        self.nb_edges = 0
    

    def __str__(self):
        """Prints the graph as a list of neighbors for each node (one per line)"""
        if not self.graph:
            output = "The graph is empty"            
        else:
            output = f"The graph has {self.nb_nodes} nodes and {self.nb_edges} edges.\n"
            for source, destination in self.graph.items():
                output += f"{source}-->{destination}\n"
        return output
    
        
    def add_edge(self, node1, node2, power_min, dist=1): # complexity : O(1)
        """
        Adds an edge to the graph. Graphs are not oriented, hence an edge is added to the adjacency list of both end nodes. 

        Parameters: 
        -----------
        node1: NodeType
            First end (node) of the edge
        node2: NodeType
            Second end (node) of the edge
        power_min: numeric (int or float)
            Minimum power on this edge
        dist: numeric (int or float), optional
            Distance between node1 and node2 on the edge. Default is 1.
        """
        self.nb_edges += 1
        self.graph[node1].append((node2, power_min, dist))
        self.graph[node2].append((node1, power_min, dist))
    

    def get_path_with_power(self, src, dest, power): # complexity : O(nb_nodes + nb_edges log(nb_edges)) in worst case
        # O(nb_nodes) in best case
        """We first search if src and dest are in the same connected_component 
        to restrain the set of node where we have to search """
        connected = self.connected_components_set()
        component = set()
        for elt in connected:
            if src in elt:
                if dest in elt:
                    component = elt
                    pass
                else:
                    return None

        power_dict = {node:None for node in component}
        power_dict[src] = 0
        prev = {node:None for node in component}
        dist_dict = {node:None for node in component}
        dist_dict[src] = 0
        min_dist = 0
        found_dist = None
        pile = [(0, src)]
        path = None
        while pile != [] and (found_dist is None or min_dist < found_dist): # Djikstras sur power
            """in this part we use the principle of Djikstra algorithm but instead of summing the power 
            of edges, we just look for the max of power in the path"""
            node_dist, node = min(pile)
            min_dist = node_dist
            pile.remove((node_dist, node))
            for end_node in self.graph[node]:
                end_node, power_between = end_node[0], end_node[1]
                if power_dict[end_node] is None:
                    if power_between <= power:
                        power_dict[end_node] = max(power_between, power_dict[node])
                        prev[end_node] = node
                        pile.append((power_dict[end_node], end_node))
                if end_node == dest:
                    if power_dict[end_node] is not None and power_dict[end_node]<=power:
                        middle = dest
                        path = [dest]
                        while middle != src:
                            middle = prev[middle]
                            path.append(middle)
                        path = path[::-1]
                        return path
        return None
        





        
    

    def connected_components(self): # complexity : O(n) everytime
        """Return all the connected components of a graph in a list of list (for example the function 
        executed on the graph generated by network.01 will return [[1,2,3], [4,5,6,7]])"""
        components_list = []
        node_visited = {node:False for node in self.nodes}

        def find_component(node): # complexity : O(n) in the worst case
            """Return all the accesible node from the input node as a list"""
            component = [node]
            for end_node in self.graph[node]:
                end_node = end_node[0]
                if not node_visited[end_node]:
                    node_visited[end_node] = True
                    component += find_component(end_node)
            return component

        for node in self.nodes:
            if not node_visited[node]:
                components_list.append(find_component(node))
        
        return components_list



    def connected_components_set(self): # complexity : the same as connected_components()
        """
        The result should be a set of frozensets (one per component), 
        For instance, for network01.in: {frozenset({1, 2, 3}), frozenset({4, 5, 6, 7})}
        """
        
        return set(map(frozenset, self.connected_components()))
    
    def min_power(self, src, dest):
        """
        Should return path, min_power. 
        """
        raise NotImplementedError


def graph_from_file(filename): # complexity : O(number of line)
    """
    Reads a text file and returns the graph as an object of the Graph class.

    The file should have the following format: 
        The first line of the file is 'n m'
        The next m lines have 'node1 node2 power_min dist' or 'node1 node2 power_min' (if dist is missing, it will be set to 1 by default)
        The nodes (node1, node2) should be named 1..n
        All values are integers.

    Parameters: 
    -----------
    filename: str
        The name of the file

    Outputs: 
    -----------
    G: Graph
        An object of the class Graph with the graph from file_name.
    """
    with open(filename) as file:
        def readline_to_listint():
            """
            Read the next line of file, and return this line as a list of integer
            
            Outputs: 
            -----------
            listint: list
                A list of integer [node1, node2, power_min, (dist)].
            """
            listline = file.readline().split()
            listint = [int(x) for x in listline]
            return listint

        n, m = readline_to_listint()
        nodes = [i for i in range(1, n+1)]
        G = Graph(nodes)
        for _ in range(m):
            args = readline_to_listint()
            G.add_edge(*args) 
            # Grace à l'étoilé, on prend en compte dist qui peut, ou non être présent
    return G

if __name__ == "__main__":
    g = graph_from_file("travail/input/network.00.in")
    g.connected_components()
    g.graph
    g.get_path_with_power(1, 4, 10)

